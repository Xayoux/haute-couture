df_products_luxes_fr <-
df_gammes |>
filter(
t == 2010,
exporter == "FRA",
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
select(t, k, !!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)))
# Dataframe répertoriant chaque concurrent sur chaque produit retenu pour la France
df_concu_luxe <-
df_gammes |>
filter(
t == 2010,
k %in% unique(df_products_luxes_fr$k),
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H"
) |>
mutate(
.by = c(k),
!!paste0("market_share_", 1 + alpha) :=
!!sym(paste0("total_v_gamme_tik_", 1 + alpha)) / sum(!!sym(paste0("total_v_gamme_tik_", 1 + alpha)), na.rm = TRUE)
) |>
filter(
!!sym(paste0("market_share_", 1 + alpha)) >= 0.05
) |>
select(k, exporter,
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)),
!!sym(paste0("market_share_", 1 + alpha))) |>
arrange(k, desc(!!sym(paste0("market_share_", 1 + alpha)))) |>
left_join(
df_product,
by = c("k" = "HS92")
)
vector_concu <-
df_concu_luxe |>
pull(exporter) |>
unique()
nb_concu_product <-
df_concu_luxe |>
summarize(
.by = k,
nb_concu = n()
)
return(list(df_concu_luxe, nb_concu_product, vector_concu))
}
seuils |>
map(concu_explo_function)
# Concurrents et produits pour chaque seuil de haut de gamme
concu_explo_function <- function(alpha){
# Dataframe des gammes pour le seuil alpha
df_gammes <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
# somme les valeurs de commerce pour chaque produit de chaque pays selon les différentes gammes (H, L, M)
# Permet de connaître la valeur du commerce de chaque gamme de chaque produit par pays
summarize(
.by = c(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))),
!!paste0("total_v_gamme_tik_", alpha + 1) := sum(v, na.rm = TRUE)
) |>
# Trie les données
arrange(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))) |>
collect() |>
# Ajoute la part de chaque gamme dans le commerce total du produit pour chaque pays
# Permet de savoir la part que le haut de gamme représente dans le commerce total du produit pour chaque pays
mutate(
.by = c(t, exporter, k),
!!paste0("share_total_v_gamme_tik_", alpha + 1) :=
!!sym(paste0("total_v_gamme_tik_", alpha + 1)) / sum(!!sym(paste0("total_v_gamme_tik_", alpha + 1)))
)
# Dataframe comprenant uniquement les produits haut de gamme français
# Si plus de 50% de la valeur commerciale du produit est considérée comme H avec le seuil choisi
df_products_luxes_fr <-
df_gammes |>
filter(
t == 2010,
exporter == "FRA",
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
select(t, k, !!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)))
# Dataframe répertoriant chaque concurrent sur chaque produit retenu pour la France
df_concu_luxe <-
df_gammes |>
filter(
t == 2010,
k %in% unique(df_products_luxes_fr$k),
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H"
) |>
mutate(
.by = c(k),
!!paste0("market_share_", 1 + alpha) :=
!!sym(paste0("total_v_gamme_tik_", 1 + alpha)) / sum(!!sym(paste0("total_v_gamme_tik_", 1 + alpha)), na.rm = TRUE)
) |>
filter(
!!sym(paste0("market_share_", 1 + alpha)) >= 0.05
) |>
select(k, exporter,
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)),
!!sym(paste0("market_share_", 1 + alpha))) |>
arrange(k, desc(!!sym(paste0("market_share_", 1 + alpha)))) |>
left_join(
df_product |>
select(HS92, description_HS92),
by = c("k" = "HS92")
)
vector_concu <-
df_concu_luxe |>
pull(exporter) |>
unique()
nb_concu_product <-
df_concu_luxe |>
summarize(
.by = k,
nb_concu = n()
)
return(list(df_concu_luxe, nb_concu_product, vector_concu))
}
seuils |>
map(concu_explo_function)
liste <- seuils |>
map(concu_explo_function)
liste[[1]]
seq_along(liste)
library(openxlsx)
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
library(openxlsx)
# Supposons que tu as une liste nommée "liste_dataframes" contenant les éléments avec trois dataframes chacun
wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
addWorksheet(wb, sheetName = paste("Seuil", seuils[i], sep = "_"))  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = j, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))  # Sauvegarde le classeur Excel
}
library(openxlsx)
# Supposons que tu as une liste nommée "liste_dataframes" contenant les éléments avec trois dataframes chacun
wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = j, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))  # Sauvegarde le classeur Excel
}
library(openxlsx)
# Supposons que tu as une liste nommée "liste_dataframes" contenant les éléments avec trois dataframes chacun
wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))  # Sauvegarde le classeur Excel
}
library(openxlsx)
# Supposons que tu as une liste nommée "liste_dataframes" contenant les éléments avec trois dataframes chacun
wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
# Sauvegarde le classeur Excel
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))
library(openxlsx)
# Supposons que tu as une liste nommée "liste_dataframes" contenant les éléments avec trois dataframes chacun
wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
# Sauvegarde le classeur Excel
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))
# Regarder la concu et le nb de produits pour différents seuils -----------
# Créer le dataframe contenant le calcul des gammes selon la méthode de Fontagné (1997)
# Seuil à 1.5 -> 50% supérieurà la médianne mondiale pondérée et 2.5
# Année de référence : 2010
seuils <- c(0.15, 0.25, 0.5, 0.75, 1, 1.5, 2)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha_H = seuils,
years = c(2010),
codes = unique(df_product$HS92),
return_output = TRUE,
path_output = here("processed-data", "BACI-gamme"),
remove = TRUE
)
# Concurrents et produits pour chaque seuil de haut de gamme
concu_explo_function <- function(alpha){
# Dataframe des gammes pour le seuil alpha
df_gammes <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
# somme les valeurs de commerce pour chaque produit de chaque pays selon les différentes gammes (H, L, M)
# Permet de connaître la valeur du commerce de chaque gamme de chaque produit par pays
summarize(
.by = c(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))),
!!paste0("total_v_gamme_tik_", alpha + 1) := sum(v, na.rm = TRUE)
) |>
# Trie les données
arrange(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))) |>
collect() |>
# Ajoute la part de chaque gamme dans le commerce total du produit pour chaque pays
# Permet de savoir la part que le haut de gamme représente dans le commerce total du produit pour chaque pays
mutate(
.by = c(t, exporter, k),
!!paste0("share_total_v_gamme_tik_", alpha + 1) :=
!!sym(paste0("total_v_gamme_tik_", alpha + 1)) / sum(!!sym(paste0("total_v_gamme_tik_", alpha + 1)))
)
# Dataframe comprenant uniquement les produits haut de gamme français
# Si plus de 50% de la valeur commerciale du produit est considérée comme H avec le seuil choisi
df_products_luxes_fr <-
df_gammes |>
filter(
t == 2010,
exporter == "FRA",
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
select(t, k, !!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)))
# Dataframe répertoriant chaque concurrent sur chaque produit retenu pour la France
df_concu_luxe <-
df_gammes |>
filter(
t == 2010,
k %in% unique(df_products_luxes_fr$k),
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H"
) |>
mutate(
.by = c(k),
!!paste0("market_share_", 1 + alpha) :=
!!sym(paste0("total_v_gamme_tik_", 1 + alpha)) / sum(!!sym(paste0("total_v_gamme_tik_", 1 + alpha)), na.rm = TRUE)
) |>
filter(
!!sym(paste0("market_share_", 1 + alpha)) >= 0.05
) |>
select(k, exporter,
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)),
!!sym(paste0("market_share_", 1 + alpha))) |>
arrange(k, desc(!!sym(paste0("market_share_", 1 + alpha)))) |>
left_join(
df_product |>
select(HS92, description_HS92),
by = c("k" = "HS92")
)
vector_concu <-
df_concu_luxe |>
pull(exporter) |>
unique()
nb_concu_product <-
df_concu_luxe |>
summarize(
.by = k,
nb_concu = n()
)
return(list(df_concu_luxe, nb_concu_product, vector_concu))
}
liste <- seuils |>
map(concu_explo_function)
{wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
# Sauvegarde le classeur Excel
}
# si concurrent.xlsx existe supprimer le fichier
if(file.exists(here("processed-data", "concurrents.xlsx"))){
file.remove(here("processed-data", "concurrents.xlsx"))
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))}
chapter_codes <- c(4202, 4203, 61, 62, 64, 6504, 6505, 6506, 7113, 7114, 7116, 7117)
# Créer un dataframe contenant les correspondances entre les codes produits de la nomenclature HS22 et HS92
df_product <-
extract_product(
codes_vector = chapter_codes,
path_output = here("processed-data", "codes-produits.xlsx"),
revision_origin = "HS22",
revision_destination = "HS92",
export = TRUE,
return_df = TRUE,
correspondance = TRUE
)
# Créer la base de données BACI ------------------------------------------
# dl_baci(
#   dl_folder = here("..", "BACI2"),
# )
# Définition des produits de luxe -----------------------------------------
# Regarder la concu et le nb de produits pour différents seuils -----------
# Créer le dataframe contenant le calcul des gammes selon la méthode de Fontagné (1997)
# Seuil à 1.5 -> 50% supérieurà la médianne mondiale pondérée et 2.5
# Année de référence : 2010
seuils <- c(0.15, 0.25, 0.5, 0.75, 1, 1.5, 2)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha_H = seuils,
years = c(2010),
codes = unique(df_product$HS92),
return_output = TRUE,
path_output = here("processed-data", "BACI-gamme"),
remove = TRUE
)
# Concurrents et produits pour chaque seuil de haut de gamme
concu_explo_function <- function(alpha){
# Dataframe des gammes pour le seuil alpha
df_gammes <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
# somme les valeurs de commerce pour chaque produit de chaque pays selon les différentes gammes (H, L, M)
# Permet de connaître la valeur du commerce de chaque gamme de chaque produit par pays
summarize(
.by = c(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))),
!!paste0("total_v_gamme_tik_", alpha + 1) := sum(v, na.rm = TRUE)
) |>
# Trie les données
arrange(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))) |>
collect() |>
# Ajoute la part de chaque gamme dans le commerce total du produit pour chaque pays
# Permet de savoir la part que le haut de gamme représente dans le commerce total du produit pour chaque pays
mutate(
.by = c(t, exporter, k),
!!paste0("share_total_v_gamme_tik_", alpha + 1) :=
!!sym(paste0("total_v_gamme_tik_", alpha + 1)) / sum(!!sym(paste0("total_v_gamme_tik_", alpha + 1)))
)
# Dataframe comprenant uniquement les produits haut de gamme français
# Si plus de 50% de la valeur commerciale du produit est considérée comme H avec le seuil choisi
df_products_luxes_fr <-
df_gammes |>
filter(
t == 2010,
exporter == "FRA",
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
select(t, k, !!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)))
# Dataframe répertoriant chaque concurrent sur chaque produit retenu pour la France
df_concu_luxe <-
df_gammes |>
filter(
t == 2010,
k %in% unique(df_products_luxes_fr$k),
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H"
) |>
mutate(
.by = c(k),
!!paste0("market_share_", 1 + alpha) :=
!!sym(paste0("total_v_gamme_tik_", 1 + alpha)) / sum(!!sym(paste0("total_v_gamme_tik_", 1 + alpha)), na.rm = TRUE)
) |>
filter(
!!sym(paste0("market_share_", 1 + alpha)) >= 0.05
) |>
select(k, exporter,
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)),
!!sym(paste0("market_share_", 1 + alpha))) |>
arrange(k, desc(!!sym(paste0("market_share_", 1 + alpha)))) |>
left_join(
df_product |>
select(HS92, description_HS92),
by = c("k" = "HS92")
)
vector_concu <-
df_concu_luxe |>
pull(exporter) |>
unique()
nb_concu_product <-
df_concu_luxe |>
summarize(
.by = k,
nb_concu = n()
)
return(list(df_concu_luxe, nb_concu_product, vector_concu))
}
liste <- seuils |>
map(concu_explo_function)
{wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", 1 + seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
# Sauvegarde le classeur Excel
}
# si concurrent.xlsx existe supprimer le fichier
if(file.exists(here("processed-data", "concurrents.xlsx"))){
file.remove(here("processed-data", "concurrents.xlsx"))
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))}
seuils <- c(0.15, 0.25, 0.5, 0.75, 1, 1.5, 2)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha_H = seuils,
years = c(2010),
codes = unique(df_product$HS92),
return_output = TRUE,
path_output = here("processed-data", "BACI-gamme"),
remove = TRUE
)
# Concurrents et produits pour chaque seuil de haut de gamme
concu_explo_function <- function(alpha){
# Dataframe des gammes pour le seuil alpha
df_gammes <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
# somme les valeurs de commerce pour chaque produit de chaque pays selon les différentes gammes (H, L, M)
# Permet de connaître la valeur du commerce de chaque gamme de chaque produit par pays
summarize(
.by = c(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))),
!!paste0("total_v_gamme_tik_", alpha + 1) := sum(v, na.rm = TRUE)
) |>
# Trie les données
arrange(t, exporter, k, !!sym(paste0("gamme_fontagne_1997_", alpha + 1))) |>
collect() |>
# Ajoute la part de chaque gamme dans le commerce total du produit pour chaque pays
# Permet de savoir la part que le haut de gamme représente dans le commerce total du produit pour chaque pays
mutate(
.by = c(t, exporter, k),
!!paste0("share_total_v_gamme_tik_", alpha + 1) :=
!!sym(paste0("total_v_gamme_tik_", alpha + 1)) / sum(!!sym(paste0("total_v_gamme_tik_", alpha + 1)))
)
# Dataframe comprenant uniquement les produits haut de gamme français
# Si plus de 50% de la valeur commerciale du produit est considérée comme H avec le seuil choisi
df_products_luxes_fr <-
df_gammes |>
filter(
t == 2010,
exporter == "FRA",
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
select(t, k, !!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)))
# Dataframe répertoriant chaque concurrent sur chaque produit retenu pour la France
df_concu_luxe <-
df_gammes |>
filter(
t == 2010,
k %in% unique(df_products_luxes_fr$k),
!!sym(paste0("gamme_fontagne_1997_", 1 + alpha)) == "H",
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)) >= 0.5
) |>
mutate(
.by = c(k),
!!paste0("market_share_", 1 + alpha) :=
!!sym(paste0("total_v_gamme_tik_", 1 + alpha)) / sum(!!sym(paste0("total_v_gamme_tik_", 1 + alpha)), na.rm = TRUE)
) |>
filter(
!!sym(paste0("market_share_", 1 + alpha)) >= 0.05
) |>
select(k, exporter,
!!sym(paste0("share_total_v_gamme_tik_", 1 + alpha)),
!!sym(paste0("market_share_", 1 + alpha))) |>
arrange(k, desc(!!sym(paste0("market_share_", 1 + alpha)))) |>
left_join(
df_product |>
select(HS92, description_HS92),
by = c("k" = "HS92")
)
vector_concu <-
df_concu_luxe |>
pull(exporter) |>
unique()
nb_concu_product <-
df_concu_luxe |>
summarize(
.by = k,
nb_concu = n()
)
return(list(df_concu_luxe, nb_concu_product, vector_concu))
}
liste <- seuils |>
map(concu_explo_function)
{wb <- createWorkbook()  # Crée un nouveau classeur Excel
for (i in seq_along(liste)) {
sheet_name <- paste("Seuil", 1 + seuils[i], sep = "_")
addWorksheet(wb, sheetName = sheet_name)  # Ajoute une nouvelle feuille
# Pour chaque dataframe dans l'élément actuel de la liste
for (j in seq_along(liste[[i]])) {
start_col <- c(1, 7, 10)[j]  # Définit le point de départ de la colonne
writeData(wb, sheet = sheet_name, x = liste[[i]][[j]], startCol = start_col)  # Écrit les données dans la feuille
}
# Sauvegarde le classeur Excel
}
# si concurrent.xlsx existe supprimer le fichier
if(file.exists(here("processed-data", "concurrents.xlsx"))){
file.remove(here("processed-data", "concurrents.xlsx"))
}
saveWorkbook(wb, file = here("processed-data", "concurrents.xlsx"))}
savehistory("d:/capliez/Documents/haute-couture/.Rhistory")
