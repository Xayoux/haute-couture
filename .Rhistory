dplyr::arrange(t) |>
dplyr::relocate(t) |>
# Calculer les valeurs unitaires
dplyr::mutate(
uv = v / q,
seuil = seuil
) |>
print() |>
# Collecter (passage en R format) pour permettre le calcul de la médianne pondérée
dplyr::collect() |>
# Calcul de la médianne pondérée des uv par la valeur pour chaque marché k,t
dplyr::mutate(
.by = c(t, k),
med_ref_t_k = matrixStats::weightedMedian(uv, w = v, na.rm = TRUE)
) |>
# Passage au format arrow
arrow::arrow_table() |>
# Définition des gammes
dplyr::mutate(
gamme_fontagne_1997 =
dplyr::case_when(
uv > (seuil) * med_ref_t_k ~ "H",
uv < (1 / (seuil)) * med_ref_t_k ~ "L",
uv > (1 / (seuil)) * med_ref_t_k &  uv < (1 + seuil) * med_ref_t_k ~ "M"
)
)
# Enregistrer la nouvelle base en format parquet par année si path_output != NULL
if(!is.null(path_output)){
df_baci |>
dplyr::group_by(t) |>
arrow::write_dataset(path_output, format = "parquet")
}
# Retourner le résultat si return_output == TRUE
if(return_output == TRUE){
df_baci <-
df_baci |>
dplyr::collect()
return(df_baci)
}
}
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
if(!require(devtools)) install.packages("devtools")
if(!require(concordance)) install_github("insongkim/concordance", dependencies=TRUE)
library(tidyverse)
library(here)
library(analyse.competitivite)
library(readxl)
library(tictoc)
library(arrow)
chapter_codes <- c(4202, 4203, 61, 62, 64, 6504, 6505, 6506, 7113, 7114, 7116, 7117)
# Créer un dataframe contenant les correspondances entre les codes produits de la nomenclature HS22 et HS92
df_product <-
extract_product(
codes_vector = chapter_codes,
path_output = here("processed-data", "codes-produits.xlsx"),
revision_origin = "HS22",
revision_destination = "HS92",
export = TRUE,
return_df = TRUE,
correspondance = TRUE
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.7
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.7,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
if(!require(devtools)) install.packages("devtools")
if(!require(concordance)) install_github("insongkim/concordance", dependencies=TRUE)
library(tidyverse)
library(here)
library(analyse.competitivite)
library(readxl)
library(tictoc)
library(arrow)
library(xtable)
library(patchwork)
chapter_codes <- c(4202, 4203, 61, 62, 64, 6504, 6505, 6506, 7113, 7114, 7116, 7117)
# Créer un dataframe contenant les correspondances entre les codes produits de la nomenclature HS22 et HS92
df_product <-
extract_product(
codes_vector = chapter_codes,
path_output = here("processed-data", "codes-produits.xlsx"),
revision_origin = "HS22",
revision_destination = "HS92",
export = TRUE,
return_df = TRUE,
correspondance = TRUE
)
gamme_ijkt_berthou_2011(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
years = c(2010,2022),
codes = unique(df_product$HS92),
return_output = TRUE,
path_output = here("processed-data", "BACI-gamme")
) |>
filter(
t == 2010,
k == "420222",
j == 124
)
gamme_ijkt_berthou_2011(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
years = c(2010,2022),
codes = unique(df_product$HS92),
return_output = TRUE,
path_output = here("processed-data", "BACI-gamme")
)
if(!require(devtools)) install.packages("devtools")
if(!require(concordance)) install_github("insongkim/concordance", dependencies=TRUE)
library(tidyverse)
library(here)
library(analyse.competitivite)
library(readxl)
library(tictoc)
library(arrow)
library(xtable)
library(patchwork)
# Vecteur contenant les numéros des chapitres / des sous-sections de la nomenclature pour les produits voulus
chapter_codes <- c(4202, 4203, 61, 62, 64, 6504, 6505, 6506, 7113, 7114, 7116, 7117)
# Créer un dataframe contenant les correspondances entre les codes produits de la nomenclature HS22 et HS92
df_product <-
extract_product(
codes_vector = chapter_codes,
path_output = here("processed-data", "codes-produits.xlsx"),
revision_origin = "HS22",
revision_destination = "HS92",
export = TRUE,
return_df = TRUE,
correspondance = TRUE
)
f
f
f
# Gammes des marchés : méthode de Fontagné et al (1997)
liste_df <- list()
alpha_vector <- c(0.15, 0.25, 0.50, 0.75, 1, 1.5)
compteur <- 1
for (i in alpha_vector){
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha_H = i,
years = c(2010,2022),
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
df_gammes <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
)
products_luxes_fr <-
df_gammes |>
filter(
t %in% c(2010,2022),
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(t, k, share_total_v_gamme)
nb_concu <-
df_gammes |>
filter(
t %in% c(2010,2022),
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H",
exporter != "FRA"
) |>
mutate(
.by = c(t,k),
mean_v = mean(total_v_tik, na.rm = TRUE),
sup_mean = (total_v_tik >= mean_v)
) |>
summarize(
.by = c(t,k),
n_concu = n(),
mean_v = mean(total_v_tik, na.rm = TRUE),
median_v = median(total_v_tik, na.rm = TRUE),
q_60_v = quantile(total_v_tik, 0.6, na.rm = TRUE),
q_70_v = quantile(total_v_tik, 0.7, na.rm = TRUE),
p_80_v = quantile(total_v_tik, 0.8, na.rm = TRUE),
p_90_v = quantile(total_v_tik, 0.9, na.rm = TRUE),
n_concu_sup_mean = sum(sup_mean, na.rm = TRUE)
) |>
arrange(t, k)
liste_df[[compteur]] <-
products_luxes_fr |>
left_join(
nb_concu,
by = c("k", "t")
) |>
mutate(
k_chapter = substr(k, 1, 2)
) |>
summarize(
.by = c(t, k_chapter),
nb_concu_mean = mean(n_concu, na.rm = TRUE),
nb_concu_median = median(n_concu, na.rm = TRUE),
nb_concu_sup_mean_mean = mean(n_concu_sup_mean, na.rm = TRUE),
mean_v_mean = mean(mean_v, na.rm = TRUE),
median_v_mean = mean(median_v, na.rm = TRUE),
q_60_v_mean = mean(q_60_v, na.rm = TRUE),
q_70_v_mean = mean(q_70_v, na.rm = TRUE),
p_80_v_mean = mean(p_80_v, na.rm = TRUE),
p_90_v_mean = mean(p_90_v, na.rm = TRUE),
nb_products = n()
) |>
mutate(
seuil = 1 + i
)
df_add <-
liste_df[[compteur]] |>
summarize(
.by = c(t,seuil),
k_chapter = "total",
nb_concu_mean = mean(nb_concu_mean, na.rm = TRUE),
nb_concu_median = mean(nb_concu_median, na.rm = TRUE),
nb_concu_sup_mean_mean = mean(nb_concu_sup_mean_mean, na.rm = TRUE),
mean_v_mean = mean(mean_v_mean, na.rm = TRUE),
median_v_mean = mean(median_v_mean, na.rm = TRUE),
q_60_v_mean = mean(q_60_v_mean, na.rm = TRUE),
q_70_v_mean = mean(q_70_v_mean, na.rm = TRUE),
p_80_v_mean = mean(p_80_v_mean, na.rm = TRUE),
p_90_v_mean = mean(p_90_v_mean, na.rm = TRUE),
nb_products = sum(nb_products)
)
liste_df[[compteur]] <-
liste_df[[compteur]] |>
bind_rows(df_add)
compteur <- compteur + 1
}
