df_baci <-
df_baci |>
dplyr::collect()
return(df_baci)
}
}
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
gamme_ijkt_fontagne_1997 <- function(path_baci_parquet, alpha = 0.15,
years = NULL, codes = NULL,
exporters = NULL, importers = NULL,
return_output = FALSE, path_output = NULL){
df_baci <-
path_baci_parquet |>
arrow::open_dataset()
# Garder les années voulues si years != NULL
if(!is.null(years)){
df_baci <-
df_baci |>
dplyr::filter(t %in% years)
}
# Garder les codes voulus si codes != NULL
if(!is.null(codes)){
df_baci <-
df_baci |>
dplyr::filter(k %in% codes)
}
# Garder les exportateurs voulus si exporter != NULL
# Filtrer par rapport aux codes iso numériques
if(!is.null(exporters) & is.numeric(exporters)){
df_baci <-
df_baci |>
dplyr::filter(i %in% exporters)
}
# Garder les exportateurs voulus si exporter != NULL
# Filtrer par rapport aux codes iso3
if(!is.null(exporters) & is.character(exporters)){
df_baci <-
df_baci |>
dplyr::filter(exporter %in% exporters)
}
# Garder les importateurs voulus si importer != NULL
# Filtrer par rapport aux codes iso numériques
if(!is.null(importers) & is.numeric(importers)){
df_baci <-
df_baci |>
dplyr::filter(j %in% importers)
}
# Garder les importateurs voulus si importer != NULL
# Filtrer par rapport aux codes iso3
if(!is.null(importers) & is.character(importers)){
df_baci <-
df_baci |>
dplyr::filter(importer %in% importers)
}
# Définir le seuil permettant de déterminer les gammes
seuil <- 1 + alpha
seuil <-
seuil |>
arrow::arrow_array() # Passage en format arrow pour être sur qu'arrow comprenne
print(seuil)
# Définition des gammes ---------------------------------------------------
df_baci <-
df_baci |>
# Pour l'esthétique du dataframe
dplyr::arrange(t) |>
dplyr::relocate(t) |>
# Calculer les valeurs unitaires
dplyr::mutate(
uv = v / q
) |>
# Collecter (passage en R format) pour permettre le calcul de la médianne pondérée
dplyr::collect() |>
# Calcul de la médianne pondérée des uv par la valeur pour chaque marché k,t
dplyr::mutate(
.by = c(t, k),
med_ref_t_k = matrixStats::weightedMedian(uv, w = v, na.rm = TRUE)
) |>
# Passage au format arrow
arrow::arrow_table() |>
# Définition des gammes
dplyr::mutate(
gamme_fontagne_1997 =
dplyr::case_when(
uv > (seuil) * med_ref_t_k ~ "H",
uv < (1 / (seuil)) * med_ref_t_k ~ "L",
uv > (1 / (seuil)) * med_ref_t_k &  uv < (1 + seuil) * med_ref_t_k ~ "M"
)
)
# Enregistrer la nouvelle base en format parquet par année si path_output != NULL
if(!is.null(path_output)){
df_baci |>
dplyr::group_by(t) |>
arrow::write_dataset(path_output, format = "parquet")
}
# Retourner le résultat si return_output == TRUE
if(return_output == TRUE){
df_baci <-
df_baci |>
dplyr::collect()
return(df_baci)
}
}
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
gamme_ijkt_fontagne_1997 <- function(path_baci_parquet, alpha = 0.15,
years = NULL, codes = NULL,
exporters = NULL, importers = NULL,
return_output = FALSE, path_output = NULL){
df_baci <-
path_baci_parquet |>
arrow::open_dataset()
# Garder les années voulues si years != NULL
if(!is.null(years)){
df_baci <-
df_baci |>
dplyr::filter(t %in% years)
}
# Garder les codes voulus si codes != NULL
if(!is.null(codes)){
df_baci <-
df_baci |>
dplyr::filter(k %in% codes)
}
# Garder les exportateurs voulus si exporter != NULL
# Filtrer par rapport aux codes iso numériques
if(!is.null(exporters) & is.numeric(exporters)){
df_baci <-
df_baci |>
dplyr::filter(i %in% exporters)
}
# Garder les exportateurs voulus si exporter != NULL
# Filtrer par rapport aux codes iso3
if(!is.null(exporters) & is.character(exporters)){
df_baci <-
df_baci |>
dplyr::filter(exporter %in% exporters)
}
# Garder les importateurs voulus si importer != NULL
# Filtrer par rapport aux codes iso numériques
if(!is.null(importers) & is.numeric(importers)){
df_baci <-
df_baci |>
dplyr::filter(j %in% importers)
}
# Garder les importateurs voulus si importer != NULL
# Filtrer par rapport aux codes iso3
if(!is.null(importers) & is.character(importers)){
df_baci <-
df_baci |>
dplyr::filter(importer %in% importers)
}
# Définir le seuil permettant de déterminer les gammes
seuil <- 1 + alpha
seuil <-
seuil |>
arrow::arrow_array() # Passage en format arrow pour être sur qu'arrow comprenne
print(seuil)
# Définition des gammes ---------------------------------------------------
df_baci <-
df_baci |>
# Pour l'esthétique du dataframe
dplyr::arrange(t) |>
dplyr::relocate(t) |>
# Calculer les valeurs unitaires
dplyr::mutate(
uv = v / q,
seuil = seuil
) |>
print() |>
# Collecter (passage en R format) pour permettre le calcul de la médianne pondérée
dplyr::collect() |>
# Calcul de la médianne pondérée des uv par la valeur pour chaque marché k,t
dplyr::mutate(
.by = c(t, k),
med_ref_t_k = matrixStats::weightedMedian(uv, w = v, na.rm = TRUE)
) |>
# Passage au format arrow
arrow::arrow_table() |>
# Définition des gammes
dplyr::mutate(
gamme_fontagne_1997 =
dplyr::case_when(
uv > (seuil) * med_ref_t_k ~ "H",
uv < (1 / (seuil)) * med_ref_t_k ~ "L",
uv > (1 / (seuil)) * med_ref_t_k &  uv < (1 + seuil) * med_ref_t_k ~ "M"
)
)
# Enregistrer la nouvelle base en format parquet par année si path_output != NULL
if(!is.null(path_output)){
df_baci |>
dplyr::group_by(t) |>
arrow::write_dataset(path_output, format = "parquet")
}
# Retourner le résultat si return_output == TRUE
if(return_output == TRUE){
df_baci <-
df_baci |>
dplyr::collect()
return(df_baci)
}
}
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
if(!require(devtools)) install.packages("devtools")
if(!require(concordance)) install_github("insongkim/concordance", dependencies=TRUE)
library(tidyverse)
library(here)
library(analyse.competitivite)
library(readxl)
library(tictoc)
library(arrow)
chapter_codes <- c(4202, 4203, 61, 62, 64, 6504, 6505, 6506, 7113, 7114, 7116, 7117)
# Créer un dataframe contenant les correspondances entre les codes produits de la nomenclature HS22 et HS92
df_product <-
extract_product(
codes_vector = chapter_codes,
path_output = here("processed-data", "codes-produits.xlsx"),
revision_origin = "HS22",
revision_destination = "HS92",
export = TRUE,
return_df = TRUE,
correspondance = TRUE
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 0.9,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.7
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.7,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1.5,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
gamme_ijkt_fontagne_1997(
path_baci_parquet = here("..", "BACI2", "BACI-parquet"),
alpha = 1,
years = 2010:2022,
codes = unique(df_product$HS92),
return_output = FALSE,
path_output = here("processed-data", "BACI-gamme")
)
products_luxes_fr <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
exporter == "FRA",
gamme_fontagne_1997 == "H",
share_total_v_gamme >= 0.5
) |>
select(k, share_total_v_gamme)
nb_concu <-
here("processed-data", "BACI-gamme") |>
open_dataset() |>
summarize(
.by = c(t, exporter, k, gamme_fontagne_1997),
total_v_tik = sum(v, na.rm = TRUE)
) |>
arrange(t, exporter, k, gamme_fontagne_1997) |>
collect() |>
mutate(
.by = c(t, exporter, k),
share_total_v_gamme = total_v_tik / sum(total_v_tik)
) |>
filter(
t == 2010,
share_total_v_gamme >= 0.5,
k %in% unique(products_luxes_fr$k),
gamme_fontagne_1997 == "H"
) |>
group_by(k) |>
count()
products_luxes_fr |>
left_join(
nb_concu,
by = "k"
)
